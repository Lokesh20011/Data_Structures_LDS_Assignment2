#9. Evaluate a Postfix Expression Using Stack:
class Stack:
    def __init__(self):
        self.items = []
        
    def push(self, item):
        self.items.append(item)
        
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        
    def is_empty(self):
        return len(self.items) == 0

def evaluate_postfix_expression(expression):
    stack = Stack()
    
    for char in expression:
        if char.isdigit():
            stack.push(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()
            result = perform_operation(operand1, operand2, char)
            stack.push(result)
            
    return stack.pop()

def perform_operation(a, b, operator):
    if operator == '+':
        return a + b
    elif operator == '-':
        return a - b
    elif operator == '*':
        return a * b
    elif operator == '/':
        return a // b

try:
    postfix_expr = input("Enter the postfix expression: ")
    result = evaluate_postfix_expression(postfix_expr)
    print("Result of postfix expression:", result)
    
except ValueError:
    print("Invalid input. Please enter a valid postfix expression.")